rich_shell() {
    case "$1" in
    on)
        RICH_MODE=$1
        ;;
    *)
        unset RICH_MODE
        ;;
    esac
    __richrc__git_info_env() {
        git_info_inner() {
            if type git >/dev/null; then
                GIT_BRANCH=$(git symbolic-ref --short HEAD)
                GIT_COMMIT_ID=$(git rev-parse --short HEAD)
                GIT_TAG=$(git describe --tags)
                GIT_STATUS=$(test -n "$(git status -s)" && echo '√ó')
            fi
        }
        git_info_inner 2>/dev/null
        unset -f git_info_inner
    }

    __richrc__docker_context_env() {
        docker_context_inner() {
            if type docker >/dev/null; then
                DOCKER_CONTEXT=$(docker context show)
            fi
        }
        docker_context_inner 2>/dev/null
        unset -f docker_context_inner
    }

    ___RICH_PREFIX___='ü•áüèÜüí∞ '
    ___POOR_PREFIX___='‚öîÔ∏è  '
    ___RICH_BRANCH_CHAR___='ÓÇ†'
    ___RICH_RIGHT_ARROW___='ÓÇ∞'

    if test -n "$BASH_VERSION"; then
        __richrc__color_text() {
            printf "$1$2\e[0m"
        }

        __richrc__prompt() {
            __richrc__git_info_env
            __richrc__docker_context_env

            test -n "$DOCKER_CONTEXT" && printf " üê≥($DOCKER_CONTEXT)"

            GIT_INFO=''
            test -n "$GIT_BRANCH" && GIT_INFO=$GIT_INFO$___RICH_BRANCH_CHAR___"$(__richrc__color_text "\e[31m" $GIT_BRANCH)"
            test -n "$GIT_COMMIT_ID" && GIT_INFO=$GIT_INFO"@$(__richrc__color_text "\e[32m" $GIT_COMMIT_ID)"
            test -n "$GIT_TAG" && GIT_INFO=$GIT_INFO":$(__richrc__color_text "\e[36m" $GIT_TAG)"
            test -n "$GIT_STATUS" && GIT_INFO=$GIT_INFO"$(__richrc__color_text "\e[33m" $GIT_STATUS)"

            test -n "$GIT_INFO" && printf " üêô($GIT_INFO)"

            unset DOCKER_CONTEXT GIT_BRANCH GIT_COMMIT_ID GIT_TAG GIT_STATUS GIT_INFO
            unset -f __richrc__prompt
        }

        __richrc__symbol() {
            test $UID -eq 0 && __richrc__color_text "\e[31m" '#' || __richrc__color_text "\e[1;33m" '$'
        }

        __richrc__show_exit_code() {
            __richrc__color_text "\e[33m" ${__LAST_CODE__:-0}
        }

        if [[ $- == *i* ]]; then bind '"\e[A": history-search-backward'; bind '"\e[B": history-search-forward'; fi
        RICH_PS1=''
        test -n "$RICH_MODE" && export RICH_PS1="\n$___RICH_PREFIX___\[\e[32m\][\$(date '+%Y-%m-%d-%H.%M.%S')]\[\e[1;31m\] <\$(tty | sed -e 's:/dev/::')> \[\e[1;34m\]\$(ls -1 | wc -l | sed 's: ::g') files \[\e[1;33m\]\$(ls -lah | grep -m 1 total | sed 's/total //')b\[\e[0m\]\$(__richrc__prompt)\n"
        export PS1=$RICH_PS1'\[\e[40m\]'$___POOR_PREFIX___'\[\e[38;5;135m\]\u\[\e[0m\]@\[\e[38;5;166m\]\h \[\e[46;30;118m\]'$___RICH_RIGHT_ARROW___'\[\e[46;30;118m\]\w\[\e[0m\]\[\e[36;118m\]'$___RICH_RIGHT_ARROW___'\[\e[0m\] {$(__richrc__show_exit_code)} \[\e[1;4;33m\]\n$(__richrc__symbol) '
        export PROMPT_COMMAND='export __LAST_CODE__=$?' RPROMPT=''
    elif test -n "$ZSH_VERSION"; then
        __richrc__color_text() {
            echo $1$2'%f'
        }

        __richrc__prompt() {
            __richrc__git_info_env
            __richrc__docker_context_env

            test -n "$DOCKER_CONTEXT" && echo -n " üê≥($DOCKER_CONTEXT)"

            GIT_INFO=''
            test -n "$GIT_BRANCH" && GIT_INFO=$GIT_INFO$___RICH_BRANCH_CHAR___"$(__richrc__color_text '%F{1}' $GIT_BRANCH)"
            test -n "$GIT_COMMIT_ID" && GIT_INFO=$GIT_INFO"@$(__richrc__color_text '%F{2}' $GIT_COMMIT_ID)"
            test -n "$GIT_TAG" && GIT_INFO=$GIT_INFO":$(__richrc__color_text '%F{3}' $GIT_TAG)"
            test -n "$GIT_STATUS" && GIT_INFO=$GIT_INFO"$(__richrc__color_text '%F{3}' $GIT_STATUS)"

            test -n "$GIT_INFO" && echo -n " üêô($GIT_INFO)"

            unset DOCKER_CONTEXT GIT_BRANCH GIT_COMMIT_ID GIT_TAG GIT_STATUS GIT_INFO
            unset -f __richrc__prompt
        }

        __richrc__symbol() {
            test $UID -eq 0 && __richrc__color_text '%F{1}' '#' || __richrc__color_text '%F{3}' '$'
        }

        autoload -Uz history-search-end
        zle -N history-beginning-search-backward-end \
                history-search-end
        zle -N history-beginning-search-forward-end \
                        history-search-end
        bindkey "\e[5~" history-beginning-search-backward-end
        bindkey "\e[6~" history-beginning-search-forward-end
        bindkey "^[[A" history-beginning-search-backward
        bindkey "^[[B" history-beginning-search-forward

        setopt PROMPT_SUBST
        RICH_PS1=''
        test -n "$RICH_MODE" && export RICH_PS1=$___RICH_PREFIX___$'%F{green}[$(date "+%Y-%m-%d-%H.%M.%S")]%f %F{9}<$(tty | sed -e "s:/dev/::")> %F{69}$(ls -1 | wc -l | sed "s: ::g") files %F{3}$(ls -lah | grep -m 1 total | sed "s/total //")b%f$(__richrc__prompt)\n'
        export PS1=$RICH_PS1$'%K{0}'$___POOR_PREFIX___$'%F{135}%n%f@%F{166}%m%f %K{14}%F{0}'$___RICH_RIGHT_ARROW___$'%K{14}%F{0}%~%k%F{14}'$___RICH_RIGHT_ARROW___$'%k %f{%F{3}%?%f}\n%F{3}%U$(__richrc__symbol)%u '
    fi
    unset RICH_MODE
}

rich() {
    rich_shell on
}

poor() {
    rich_shell off
}

test -n "$NEW_YEAR_I_LL_RICH" && rich || poor